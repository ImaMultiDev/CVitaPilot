// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo principal del CV
model CV {
  id              String   @id @default(cuid())
  name            String
  userId          String   // Para futuro sistema de usuarios
  isActive        Boolean  @default(true) // CV actual en el editor
  
  // Información personal
  personalName     String
  position         String
  phone            String
  email            String
  linkedin         String?
  github           String?
  website          String?
  location         String
  
  // Descripción
  aboutMe          String?
  
  // Otros datos
  drivingLicense   Boolean  @default(false)
  ownVehicle       Boolean  @default(false)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relaciones
  languages        Language[]
  skills           Skill[]
  competences      Competence[]
  interests        Interest[]
  experiences      Experience[]
  education        Education[]
  deliveries       CVDelivery[]
  
  @@map("cvs")
}

// Idiomas
model Language {
  id     String @id @default(cuid())
  name   String
  level  String // A1, A2, B1, B2, C1, C2, Nativo
  
  // Relación
  cv     CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId   String
  
  @@map("languages")
}

// Habilidades técnicas
model Skill {
  id       String  @id @default(cuid())
  name     String
  category String  // language, framework, database, tool, library, orm, ai
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("skills")
}

// Competencias profesionales
model Competence {
  id       String  @id @default(cuid())
  name     String
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("competences")
}

// Intereses
model Interest {
  id       String  @id @default(cuid())
  name     String
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("interests")
}

// Experiencias laborales
model Experience {
  id           String   @id @default(cuid())
  position     String
  company      String
  location     String
  startDate    String
  endDate      String?
  contractType String
  workType     String
  description  String
  technologies String[] // Array de strings para las tecnologías
  selected     Boolean  @default(true)
  
  // Relación
  cv           CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId         String
  
  @@map("experiences")
}

// Formación académica
model Education {
  id          String  @id @default(cuid())
  title       String
  institution String
  location    String
  startYear   String
  endYear     String
  type        String  // formal, additional
  duration    String? // Solo para cursos adicionales
  selected    Boolean @default(true)
  
  // Relación
  cv          CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId        String
  
  @@map("education")
}

// Entregas del CV
model CVDelivery {
  id       String @id @default(cuid())
  company  String
  position String
  date     String
  status   String // sent, interview, rejected, accepted
  notes    String?
  
  // Relación
  cv       CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  createdAt DateTime @default(now())
  
  @@map("cv_deliveries")
}

// Usuario (para futuro)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}
