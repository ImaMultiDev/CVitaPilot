// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo principal del CV
model CV {
  id              String   @id @default(cuid())
  name            String
  userId          String   
  isActive        Boolean  @default(true) 
  
  // Relación con usuario
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información personal
  personalName     String
  position         String
  phone            String
  email            String
  linkedin         String?
  github           String?
  website          String?
  location         String
  
  // Descripción
  aboutMe          String?
  
  // Otros datos
  drivingLicense   Boolean  @default(false)
  ownVehicle       Boolean  @default(false)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relaciones
  languages        Language[]
  skills           Skill[]
  competences      Competence[]
  interests        Interest[]
  softSkills       SoftSkill[]
  experiences      Experience[]
  education        Education[]
  certifications   Certification[]
  achievements     Achievement[]
  references       Reference[]
  deliveries       CVDelivery[]
  socialNetworks   SocialNetwork[]
  skillCategories  SkillCategory[]
  
  @@map("cvs")
}

// Idiomas
model Language {
  id     String @id @default(cuid())
  name   String
  level  String // A1, A2, B1, B2, C1, C2, Nativo
  
  // Relación
  cv     CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId   String
  
  @@map("languages")
}

// Habilidades técnicas
model Skill {
  id         String        @id @default(cuid())
  name       String
  selected   Boolean       @default(true)
  
  // Relación con categoría
  category   SkillCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  
  // Relación con CV
  cv         CV            @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId       String
  
  @@map("skills")
}

// Categorías de habilidades dinámicas
model SkillCategory {
  id       String @id @default(cuid())
  name     String // Nombre de la categoría (ej: "Lenguajes de Programación", "Cocina", "Diseño")
  
  // Relación con CV
  cv       CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  // Relación con habilidades
  skills   Skill[]
  
  @@map("skill_categories")
}

// Competencias profesionales
model Competence {
  id       String  @id @default(cuid())
  name     String
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("competences")
}

// Intereses
model Interest {
  id       String  @id @default(cuid())
  name     String
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("interests")
}

// Habilidades blandas
model SoftSkill {
  id       String  @id @default(cuid())
  name     String
  selected Boolean @default(true)
  
  // Relación
  cv       CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("soft_skills")
}

// Experiencias laborales
model Experience {
  id           String   @id @default(cuid())
  position     String
  company      String
  location     String
  startDate    String
  endDate      String?
  contractType String
  workSchedule String   // Jornada completa, parcial, etc.
  workModality String   // Presencial, remoto, híbrido
  description  String
  technologies String[] // Array de strings para las tecnologías
  selected     Boolean  @default(true)
  
  // Relación
  cv           CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId         String
  
  @@map("experiences")
}

// Formación académica oficial
model Education {
  id          String  @id @default(cuid())
  title       String  // Título del grado/master/doctorado
  institution String  // Universidad/Centro educativo
  location    String  // Ciudad, País
  startYear   String  // Año de inicio
  endYear     String  // Año de finalización
  selected    Boolean @default(true)
  
  // Relación
  cv          CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId        String
  
  @@map("education")
}

// Certificaciones
model Certification {
  id           String  @id @default(cuid())
  name         String
  issuer       String  // Organización que emite el certificado
  date         String  // Fecha de obtención
  expiryDate   String? // Fecha de expiración (opcional)
  credentialId String? // ID del certificado (opcional)
  url          String? // URL de verificación (opcional)
  selected     Boolean @default(true)
  
  // Relación
  cv           CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId         String
  
  @@map("certifications")
}

// Logros y Proyectos Destacados
model Achievement {
  id          String  @id @default(cuid())
  title       String  // Título del logro/proyecto
  type        String  // "achievement" | "project"
  description String  // Descripción detallada
  date        String  // Fecha o período
  company     String? // Empresa/Organización (opcional)
  technologies String[] // Tecnologías utilizadas (para proyectos)
  metrics     String? // Métricas de impacto (ej: "Aumentó ventas 25%")
  url         String? // URL del proyecto/reconocimiento (opcional)
  selected    Boolean @default(true)
  
  // Relación
  cv          CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId        String
  
  @@map("achievements")
}

// Referencias Profesionales
model Reference {
  id           String  @id @default(cuid())
  name         String  // Nombre completo
  position     String  // Cargo/Puesto
  company      String  // Empresa
  relationship String  // Relación profesional
  phone        String  // Teléfono de contacto
  email        String  // Email de contacto
  yearsWorking String? // Tiempo trabajando juntos (opcional)
  selected     Boolean @default(true)
  
  // Relación
  cv           CV      @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId         String
  
  @@map("references")
}

// Entregas del CV
model CVDelivery {
  id       String @id @default(cuid())
  company  String
  position String
  date     String
  status   String // sent, interview, rejected, accepted
  notes    String?
  
  // Relación
  cv       CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  createdAt DateTime @default(now())
  
  @@map("cv_deliveries")
}

// Usuario - Compatible con Auth.js
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para Credentials Provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones Auth.js
  accounts Account[]
  sessions Session[]
  
  // Relaciones de la aplicación - Conectar CVs con usuario
  cvs       CV[]
  
  @@map("users")
}

// Modelos requeridos por Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Redes sociales dinámicas
model SocialNetwork {
  id       String @id @default(cuid())
  name     String // LinkedIn, GitHub, Twitter, Instagram, etc.
  url      String
  
  // Relación
  cv       CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
  
  @@map("social_networks")
}
